{"version":3,"file":"CartController.js","sourceRoot":"","sources":["../../../src/controllers/API/CartController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\nimport mongoose from \"mongoose\";\nimport { get, post, bodyValidator, controller } from \"../decorators/index\";\nimport { Product, Order, User, Cart, CartItem } from \"../../interfaces\";\nimport { base } from \"../../app\";\n\nconst UserModel = mongoose.model<User>(\"User\");\nconst CartModel = mongoose.model<Cart>(\"Cart\");\nconst ProductModel = base<Product>(\"product\");\n\n@controller(\"/api/cart\")\nclass CartController {\n  //write test asap for this and other cart operations\n  //add\n  //   new cart item\n  // edit\n  //  cart items is taken care of in add\n  //  cart item\n  // delete\n  //  multiple items\n  //  entire items\n  //  one item\n  // get\n  //  item\n  //  items\n  @post(\"/\")\n  @bodyValidator(\"userId\", \"products\")\n  async addToCart(req: Request, res: Response) {\n    const { userId, products } = req.body;\n    try {\n      const productMap = new Map<string, number>();\n      for (let product of products as CartItem[]) {\n        const productRecord = await ProductModel.find(product.productId);\n        productRecord && productMap.set(product.productId, product.quantity);\n      }\n      const user = await UserModel.findById(userId);\n      //if no user throw no success, invalid user\n      if (user) {\n        let cart = await CartModel.findOne({\n          userId,\n        });\n        if (cart) {\n          for (let item of cart.cartItems) {\n            const { productId } = item;\n            const productQ = productMap.get(productId);\n            if (productQ) {\n              item.quantity = productQ;\n            }\n          }\n          for (const [productId, quantity] of productMap) {\n            cart.cartItems.push({\n              quantity,\n              productId,\n            });\n          }\n          await cart.save({});\n          return res.statusJson(200, {\n            data: {\n              message: \"Products successfully edited to cart\",\n              cart,\n            },\n          });\n        } else {\n          const newCart = new CartModel({\n            userId,\n            cartItems: products as CartItem[],\n          });\n          await newCart.save({});\n          return res.statusJson(201, {\n            data: {\n              message: \"Products successfully added to cart\",\n              cart: newCart,\n            },\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      return res.statusJson(500, { error });\n    }\n  }\n}\n"]}