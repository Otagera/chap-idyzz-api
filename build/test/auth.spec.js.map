{"version":3,"file":"auth.spec.js","sourceRoot":"","sources":["../../src/test/auth.spec.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwJG","sourcesContent":["/* import mongoose from \"mongoose\";\nimport request from \"supertest\";\nimport { expect } from \"chai\";\nimport { app } from \"../app\";\nimport { User } from \"../interfaces\";\n\nconst UserModel = mongoose.model<User>(\"User\");\n\ndescribe(\"/auth\", () => {\n  beforeEach(async () => {\n    await UserModel.deleteMany({});\n  });\n  describe(\"GET /users\", () => {\n    it(\"should return all users\", async () => {\n      const users = [\n        {\n          username: \"otagera\",\n          password: \"12345678\",\n          email: \"string\",\n          address: \"string\",\n          firstname: \"string\",\n          lastname: \"string\",\n        },\n        {\n          username: \"leo\",\n          password: \"12345678\",\n          email: \"string\",\n          address: \"string\",\n          firstname: \"string\",\n          lastname: \"string\",\n        },\n        {\n          username: \"lenxo\",\n          password: \"12345678\",\n          email: \"string\",\n          address: \"string\",\n          firstname: \"string\",\n          lastname: \"string\",\n        },\n      ];\n      await UserModel.insertMany(users);\n      const res = await request(app).get(\"/auth/users\");\n      expect(res.status).to.equal(200);\n      expect(res.body.data.users.length).to.equal(3);\n    });\n  });\n\n  describe(\"GET /users/:id\", () => {\n    it(\"should return a user if valid id is passed\", async () => {\n      const user = new UserModel({\n        username: \"otagera\",\n        password: 12345678,\n        email: \"string\",\n        address: \"string\",\n        firstname: \"string\",\n        lastname: \"string\",\n      });\n      await user.save();\n      const res = await request(app).get(\"/auth/users/\" + user._id);\n      expect(res.status).to.equal(200);\n      expect(res.body.data.user).to.have.property(\"username\", user.username);\n    });\n    it(\"should return 404 error when invalid object id is passed\", async () => {\n      const res = await request(app).get(\"/auth/users/1\");\n      expect(res.status).to.equal(400);\n    });\n    it(\"should return 404 when valid object id is passed but does not exist\", async () => {\n      const res = await request(app).get(\"/auth/users/123456789012\");\n      expect(res.status).to.equal(404);\n    });\n  });\n\n  describe(\"POST /signup\", () => {\n    it(\"should return new user when all request body is valid to signup\", async () => {\n      const res = await request(app).post(\"/auth/signup\").send({\n        username: \"lenzo\",\n        password: \"12345678\",\n        email: \"string\",\n        address: \"string\",\n        firstname: \"string\",\n        lastname: \"string\",\n      });\n      expect(res.status).to.equal(200);\n      expect(res.body.data.user).to.have.property(\"username\", \"lenzo\");\n    });\n  });\n\n  describe(\"POST /login\", () => {\n    it(\"should throw error because of wrong username\", async () => {\n      const res = await request(app).post(\"/auth/signup\").send({\n        username: \"lenzo\",\n        password: \"12345678\",\n        email: \"string\",\n        address: \"string\",\n        firstname: \"string\",\n        lastname: \"string\",\n      });\n      expect(res.status).to.equal(200);\n      expect(res.body.data.user).to.have.property(\"username\", \"lenzo\");\n\n      const loginWrongUsernameRes = await request(app)\n        .post(\"/auth/login\")\n        .send({\n          username: \"lenzoo\",\n          password: \"12345678\",\n        });\n      expect(loginWrongUsernameRes.status).to.equal(401);\n    });\n    it(\"should throw an error because of wrong password\", async () => {\n      const res = await request(app).post(\"/auth/signup\").send({\n        username: \"lenzo\",\n        password: \"12345678\",\n        email: \"string\",\n        address: \"string\",\n        firstname: \"string\",\n        lastname: \"string\",\n      });\n      expect(res.status).to.equal(200);\n      expect(res.body.data.user).to.have.property(\"username\", \"lenzo\");\n\n      const loginWrongPasswordRes = await request(app)\n        .post(\"/auth/login\")\n        .send({\n          username: \"lenzo\",\n          password: \"123456789\",\n        });\n      expect(loginWrongPasswordRes.status).to.equal(402);\n    });\n    it(\"should return tokens after login in\", async () => {\n      const res = await request(app).post(\"/auth/signup\").send({\n        username: \"lenzo\",\n        password: \"12345678\",\n        email: \"string\",\n        address: \"string\",\n        firstname: \"string\",\n        lastname: \"string\",\n      });\n      expect(res.status).to.equal(200);\n      expect(res.body.data.user).to.have.property(\"username\", \"lenzo\");\n\n      const loginRes = await request(app).post(\"/auth/login\").send({\n        username: \"lenzo\",\n        password: \"12345678\",\n        email: \"string\",\n        address: \"string\",\n        firstname: \"string\",\n        lastname: \"string\",\n      });\n      expect(loginRes.status).to.equal(200);\n    });\n  });\n});\n */\n"]}