{"version":3,"file":"auth.spec.js","sourceRoot":"","sources":["../../src/test/auth.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import mongoose from \"mongoose\";\nimport request from \"supertest\";\nimport { expect } from \"chai\";\nimport { app } from \"../app\";\nimport { User, RequestWithBody } from \"../interfaces\";\nimport { userInfo } from \"os\";\n\nconst UserModel = mongoose.model<User>(\"User\");\n\ndescribe(\"/auth\", () => {\n  beforeEach(async () => {\n    await UserModel.deleteMany({});\n  });\n  describe(\"GET /users\", () => {\n    it(\"should return all users\", async () => {\n      const users = [\n        { username: \"otagera\", password: \"12345678\" },\n        { username: \"leo\", password: \"12345678\" },\n        { username: \"lenxo\", password: \"12345678\" },\n      ];\n      await UserModel.insertMany(users);\n      const res = await request(app).get(\"/auth/users\");\n      console.log(res.body.statusCode);\n      console.log(res.body.data.users.length);\n      expect(res.body.statusCode).to.equal(200);\n      expect(res.body.data.users.length).to.equal(3);\n    });\n  });\n\n  describe(\"GET /users/:id\", () => {\n    it(\"should return a user if valid id is passed\", async () => {\n      const user = new UserModel({\n        username: \"otagera\",\n        password: 12345678,\n      });\n      await user.save();\n      const res = await request(app).get(\"/auth/users/\" + user._id);\n      expect(res.body.statusCode).to.equal(200);\n      expect(res.body.data.user).to.have.property(\"username\", user.username);\n    });\n    it(\"should return 404 error when invalid object id is passed\", async () => {\n      const res = await request(app).get(\"/auth/users/1\");\n      expect(res.body.statusCode).to.equal(400);\n    });\n    it(\"should return 404 when valid object id is passed but does not exist\", async () => {\n      const res = await request(app).get(\"/auth/users/123456789012\");\n      expect(res.body.statusCode).to.equal(404);\n    });\n  });\n  describe(\"POST /signup\", () => {\n    it(\"should return new user when all request body is valid to signup\", async () => {\n      const res = await request(app).post(\"/auth/signup\").send({\n        username: \"lenzo\",\n        password: \"12345678\",\n      });\n      expect(res.body.statusCode).to.equal(200);\n      expect(res.body.data.user).to.have.property(\"username\", \"lenzo\");\n    });\n  });\n  describe(\"POST /login\", () => {\n    it(\"should throw error because of wrong username\", async () => {\n      const res = await request(app).post(\"/auth/signup\").send({\n        username: \"lenzo\",\n        password: \"12345678\",\n      });\n      expect(res.body.statusCode).to.equal(200);\n      expect(res.body.data.user).to.have.property(\"username\", \"lenzo\");\n\n      const loginWrongUsernameRes = await request(app)\n        .post(\"/auth/login\")\n        .send({\n          username: \"lenzoo\",\n          password: \"12345678\",\n        });\n      expect(loginWrongUsernameRes.body.statusCode).to.equal(401);\n    });\n    it(\"should throw an error because of wrong password\", async () => {\n      const res = await request(app).post(\"/auth/signup\").send({\n        username: \"lenzo\",\n        password: \"12345678\",\n      });\n      expect(res.body.statusCode).to.equal(200);\n      expect(res.body.data.user).to.have.property(\"username\", \"lenzo\");\n\n      const loginWrongPasswordRes = await request(app)\n        .post(\"/auth/login\")\n        .send({\n          username: \"lenzo\",\n          password: \"123456789\",\n        });\n      expect(loginWrongPasswordRes.body.statusCode).to.equal(402);\n    });\n    it(\"should return tokens after login in\", async () => {\n      const res = await request(app).post(\"/auth/signup\").send({\n        username: \"lenzo\",\n        password: \"12345678\",\n      });\n      expect(res.body.statusCode).to.equal(200);\n      expect(res.body.data.user).to.have.property(\"username\", \"lenzo\");\n\n      const loginRes = await request(app).post(\"/auth/login\").send({\n        username: \"lenzo\",\n        password: \"12345678\",\n      });\n      expect(loginRes.body.statusCode).to.equal(200);\n    });\n  });\n});\n"]}